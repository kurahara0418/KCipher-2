sbox=[0x63,0x7C,0x77,0x7B,0xF2,0x6B,0x6F,0xC5,0x30,0x01,0x67,0x2B,0xFE,0xD7,0xAB,0x76,
      0xCA,0x82,0xC9,0x7D,0xFA,0x59,0x47,0xF0,0xAD,0xD4,0xA2,0xAF,0x9C,0xA4,0x72,0xC0,
      0xB7,0xFD,0x93,0x26,0x36,0x3F,0xF7,0xCC,0x34,0xA5,0xE5,0xF1,0x71,0xD8,0x31,0x15,
      0x04,0xC7,0x23,0xC3,0x18,0x96,0x05,0x9A,0x07,0x12,0x80,0xE2,0xEB,0x27,0xB2,0x75,
      0x09,0x83,0x2C,0x1A,0x1B,0x6E,0x5A,0xA0,0x52,0x3B,0xD6,0xB3,0x29,0xE3,0x2F,0x84,
      0x53,0xD1,0x00,0xED,0x20,0xFC,0xB1,0x5B,0x6A,0xCB,0xBE,0x39,0x4A,0x4C,0x58,0xCF,
      0xD0,0xEF,0xAA,0xFB,0x43,0x4D,0x33,0x85,0x45,0xF9,0x02,0x7F,0x50,0x3C,0x9F,0xA8,
      0x51,0xA3,0x40,0x8F,0x92,0x9D,0x38,0xF5,0xBC,0xB6,0xDA,0x21,0x10,0xFF,0xF3,0xD2,
      0xCD,0x0C,0x13,0xEC,0x5F,0x97,0x44,0x17,0xC4,0xA7,0x7E,0x3D,0x64,0x5D,0x19,0x73,
      0x60,0x81,0x4F,0xDC,0x22,0x2A,0x90,0x88,0x46,0xEE,0xB8,0x14,0xDE,0x5E,0x0B,0xDB,
      0xE0,0x32,0x3A,0x0A,0x49,0x06,0x24,0x5C,0xC2,0xD3,0xAC,0x62,0x91,0x95,0xE4,0x79,
      0xE7,0xC8,0x37,0x6D,0x8D,0xD5,0x4E,0xA9,0x6C,0x56,0xF4,0xEA,0x65,0x7A,0xAE,0x08,
      0xBA,0x78,0x25,0x2E,0x1C,0xA6,0xB4,0xC6,0xE8,0xDD,0x74,0x1F,0x4B,0xBD,0x8B,0x8A,
      0x70,0x3E,0xB5,0x66,0x48,0x03,0xF6,0x0E,0x61,0x35,0x57,0xB9,0x86,0xC1,0x1D,0x9E,
      0xE1,0xF8,0x98,0x11,0x69,0xD9,0x8E,0x94,0x9B,0x1E,0x87,0xE9,0xCE,0x55,0x28,0xDF,
      0x8C,0xA1,0x89,0x0D,0xBF,0xE6,0x42,0x68,0x41,0x99,0x2D,0x0F,0xB0,0x54,0xBB,0x16]

IK=[0x0F1E2D3C,0x4B5A6978,0x8796A5B4,0xC3D2E1F0]
IK=[0,0,0,0]
IV=[0xF0E0D0C0,0xB0A09080,0x70605040,0x30201000]
IV=[0,0,0,0]
A=[0 for _ in range(5)]
B=[0 for _ in range(11)]
RL12=[0,0,0,0]
alpha=[[0xb6,0x08,0x6d,0x1a],[0xa0,0xf5,0xfc,0x2e],[0x5b,0xf8,0x7f,0x93],[0x45,0x59,0x56,0x8b]]
rp=[0b111000011,0b100101101,0b101001101,0b101100101]

def make_cell(word):
    cell=[0 for _ in range(4)]
    for i in range(4):
        cell[i]=(word >> (i*8)) & 0xff
    return cell
    
def SubCell(cell):
    scell=[0 for _ in range(4)]
    for i in range(4):
        scell[i]=sbox[cell[i]]
    return scell

def Mix2(cell):
    x=cell<<1
    # print(bin(x))
    if (x>>8)&1:
        x=x^0b100011011
    return x

def Mix3(cell):
    x=(cell<<1)^cell
    if (x>>8)&1:
        x=x^0b100011011
    return x

def MixColumns(scell,mc2,mc3):
    mix_result=[0 for _ in range(4)]
    mix_result[0]=mc2[0]^mc3[1]^scell[2]^scell[3]
    mix_result[1]=mc2[1]^mc3[2]^scell[3]^scell[0]
    mix_result[2]=mc2[2]^mc3[3]^scell[0]^scell[1]
    mix_result[3]=mc2[3]^mc3[0]^scell[1]^scell[2]
    return mix_result

def Sub(word):
    mc2=[0 for _ in range(4)]
    mc3=[0 for _ in range(4)]
    cell=make_cell(word)
    scell=SubCell(cell)
    for i in range(4):
        mc2[i]=Mix2(scell[i])
        mc3[i]=Mix3(scell[i])
    mix_result=MixColumns(scell,mc2,mc3)
    aes_result=(mix_result[3]<<24)|(mix_result[2]<<16)|(mix_result[1]<<8)|mix_result[0]
    return aes_result

def modulo(y,rp):
  n=y.bit_length()-1
  for i in range(n, 7, -1):
    if (y>>i)&1 == 1:
       y^=(rp<<(i-8))
  return y

def times(x, m):
  n=x.bit_length()-1
  y=m<<n
  for i in reversed(range(n)):
    if (x>>i)&1==1:
      y=y^(m<<i)
  return y

def alpha_time(x,al_num):
    y=[0,0,0,0]
    x_cell=make_cell(x)
    for i in range(4):
        y[i]=modulo(times(alpha[al_num][i],x_cell[3]),rp[al_num])
    return (y[0]<<24)^(y[1]<<16)^(y[2]<<8)^y[3]

def gen_K(IK):
    K=[0 for _ in range(12)]
    for i in range(4):
        K[i]=IK[i]
    for i in range(4,12):
        if i%4==0:
            K[i]=K[i-4]^Sub(((K[i-1]<<8)&0xffffff00)^(K[i-1]>>24))^((0x2**(i//4-1))<<24)
        else:
            K[i]=K[i-4]^K[i-1]
    return K
 
def NLF_update():
    RL12_temp=[0,0,0,0]
    RL12_temp[0]=Sub((RL12[3]+B[9])&0xffffffff)
    RL12_temp[1]=Sub(RL12[0])
    RL12_temp[2]=Sub((RL12[1]+B[4])&0xffffffff)
    RL12_temp[3]=Sub(RL12[2])
    for i in range(4):
        RL12[i]=RL12_temp[i]

def DFC_update(z_lh):
    if A[2]&0x40000000:
        temp1=alpha_time(B[0],1)^((B[0]<<8)&0xffffff00)
    else:
        temp1=alpha_time(B[0],2)^((B[0]<<8)&0xffffff00)
    if A[2]&0x80000000:
        temp2=alpha_time(B[8],3)^((B[8]<<8)&0xffffff00)
    else:
        temp2=B[8]
    
    u=alpha_time(A[0],0)^((A[0]<<8)&0xffffff00)^A[3]
    v=temp1^B[1]^B[6]^temp2

    for i in range(4):
        A[i]=A[i+1]
    for i in range(10):
        B[i]=B[i+1]
    A[4]=u
    B[10]=v
    
def key_stream(z_lh):
    z_lh[0]=((B[0]+RL12[1])&0xffffffff)^RL12[0]^A[4]
    z_lh[1]=((B[10]+RL12[3])&0xffffffff)^RL12[2]^A[0]
    NLF_update()
    DFC_update(z_lh)

def Init():
    K=gen_K(IK)
    for i in range(5):
        A[i]=K[4-i]
    B[0]=K[10]
    B[1]=K[11]
    B[2]=IV[0]
    B[3]=IV[1]
    B[4]=K[8]
    B[5]=K[9]
    B[6]=IV[2]
    B[7]=IV[3]
    B[8]=K[7]
    B[9]=K[5]
    B[10]=K[6]
    z_lh=[0,0]
    for round in range(24):
        key_stream(z_lh)
        A[4]^=z_lh[0]
        B[10]^=z_lh[1]

Init()
for i in range(8):
    z=[0,0]
    key_stream(z)
    print(hex(z[1]),end=" ")
    print(hex(z[0]))
